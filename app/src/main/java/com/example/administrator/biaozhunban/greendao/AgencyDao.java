package com.example.administrator.biaozhunban.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.biaozhunban.greendao.entity.Agency;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AGENCY".
*/
public class AgencyDao extends AbstractDao<Agency, Long> {

    public static final String TABLENAME = "AGENCY";

    /**
     * Properties of entity Agency.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Agency_id = new Property(1, String.class, "agency_id", false, "AGENCY_ID");
        public final static Property Agency_name = new Property(2, String.class, "agency_name", false, "AGENCY_NAME");
        public final static Property Agency_tel = new Property(3, String.class, "agency_tel", false, "AGENCY_TEL");
        public final static Property Agency_address = new Property(4, String.class, "agency_address", false, "AGENCY_ADDRESS");
        public final static Property Province_code = new Property(5, String.class, "province_code", false, "PROVINCE_CODE");
        public final static Property City_code = new Property(6, String.class, "city_code", false, "CITY_CODE");
        public final static Property Area_code = new Property(7, String.class, "area_code", false, "AREA_CODE");
        public final static Property Note = new Property(8, String.class, "note", false, "NOTE");
        public final static Property CreateDate = new Property(9, String.class, "createDate", false, "CREATE_DATE");
    }


    public AgencyDao(DaoConfig config) {
        super(config);
    }
    
    public AgencyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AGENCY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AGENCY_ID\" TEXT," + // 1: agency_id
                "\"AGENCY_NAME\" TEXT," + // 2: agency_name
                "\"AGENCY_TEL\" TEXT," + // 3: agency_tel
                "\"AGENCY_ADDRESS\" TEXT," + // 4: agency_address
                "\"PROVINCE_CODE\" TEXT," + // 5: province_code
                "\"CITY_CODE\" TEXT," + // 6: city_code
                "\"AREA_CODE\" TEXT," + // 7: area_code
                "\"NOTE\" TEXT," + // 8: note
                "\"CREATE_DATE\" TEXT);"); // 9: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AGENCY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Agency entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String agency_id = entity.getAgency_id();
        if (agency_id != null) {
            stmt.bindString(2, agency_id);
        }
 
        String agency_name = entity.getAgency_name();
        if (agency_name != null) {
            stmt.bindString(3, agency_name);
        }
 
        String agency_tel = entity.getAgency_tel();
        if (agency_tel != null) {
            stmt.bindString(4, agency_tel);
        }
 
        String agency_address = entity.getAgency_address();
        if (agency_address != null) {
            stmt.bindString(5, agency_address);
        }
 
        String province_code = entity.getProvince_code();
        if (province_code != null) {
            stmt.bindString(6, province_code);
        }
 
        String city_code = entity.getCity_code();
        if (city_code != null) {
            stmt.bindString(7, city_code);
        }
 
        String area_code = entity.getArea_code();
        if (area_code != null) {
            stmt.bindString(8, area_code);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(9, note);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(10, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Agency entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String agency_id = entity.getAgency_id();
        if (agency_id != null) {
            stmt.bindString(2, agency_id);
        }
 
        String agency_name = entity.getAgency_name();
        if (agency_name != null) {
            stmt.bindString(3, agency_name);
        }
 
        String agency_tel = entity.getAgency_tel();
        if (agency_tel != null) {
            stmt.bindString(4, agency_tel);
        }
 
        String agency_address = entity.getAgency_address();
        if (agency_address != null) {
            stmt.bindString(5, agency_address);
        }
 
        String province_code = entity.getProvince_code();
        if (province_code != null) {
            stmt.bindString(6, province_code);
        }
 
        String city_code = entity.getCity_code();
        if (city_code != null) {
            stmt.bindString(7, city_code);
        }
 
        String area_code = entity.getArea_code();
        if (area_code != null) {
            stmt.bindString(8, area_code);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(9, note);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(10, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Agency readEntity(Cursor cursor, int offset) {
        Agency entity = new Agency( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // agency_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // agency_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // agency_tel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // agency_address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // province_code
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // city_code
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // area_code
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // note
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Agency entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAgency_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAgency_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAgency_tel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAgency_address(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvince_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCity_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setArea_code(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNote(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Agency entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Agency entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Agency entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
