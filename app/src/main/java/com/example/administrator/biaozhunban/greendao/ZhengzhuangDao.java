package com.example.administrator.biaozhunban.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.biaozhunban.greendao.entity.Zhengzhuang;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZHENGZHUANG".
*/
public class ZhengzhuangDao extends AbstractDao<Zhengzhuang, Long> {

    public static final String TABLENAME = "ZHENGZHUANG";

    /**
     * Properties of entity Zhengzhuang.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Symptom_id = new Property(1, String.class, "symptom_id", false, "SYMPTOM_ID");
        public final static Property Gw_type = new Property(2, String.class, "gw_type", false, "GW_TYPE");
        public final static Property Symptom_name = new Property(3, String.class, "symptom_name", false, "SYMPTOM_NAME");
        public final static Property CreateDate = new Property(4, String.class, "createDate", false, "CREATE_DATE");
    }


    public ZhengzhuangDao(DaoConfig config) {
        super(config);
    }
    
    public ZhengzhuangDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZHENGZHUANG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYMPTOM_ID\" TEXT NOT NULL ," + // 1: symptom_id
                "\"GW_TYPE\" TEXT NOT NULL ," + // 2: gw_type
                "\"SYMPTOM_NAME\" TEXT NOT NULL ," + // 3: symptom_name
                "\"CREATE_DATE\" TEXT);"); // 4: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZHENGZHUANG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Zhengzhuang entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSymptom_id());
        stmt.bindString(3, entity.getGw_type());
        stmt.bindString(4, entity.getSymptom_name());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(5, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Zhengzhuang entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSymptom_id());
        stmt.bindString(3, entity.getGw_type());
        stmt.bindString(4, entity.getSymptom_name());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(5, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Zhengzhuang readEntity(Cursor cursor, int offset) {
        Zhengzhuang entity = new Zhengzhuang( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // symptom_id
            cursor.getString(offset + 2), // gw_type
            cursor.getString(offset + 3), // symptom_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Zhengzhuang entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSymptom_id(cursor.getString(offset + 1));
        entity.setGw_type(cursor.getString(offset + 2));
        entity.setSymptom_name(cursor.getString(offset + 3));
        entity.setCreateDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Zhengzhuang entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Zhengzhuang entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Zhengzhuang entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
