package com.example.administrator.biaozhunban.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.biaozhunban.greendao.entity.Yimiao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "YIMIAO".
*/
public class YimiaoDao extends AbstractDao<Yimiao, Long> {

    public static final String TABLENAME = "YIMIAO";

    /**
     * Properties of entity Yimiao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ym_id = new Property(0, Long.class, "ym_id", true, "_id");
        public final static Property Yfjz_id = new Property(1, String.class, "yfjz_id", false, "YFJZ_ID");
        public final static Property Ym_type = new Property(2, int.class, "ym_type", false, "YM_TYPE");
        public final static Property Ym_name = new Property(3, String.class, "ym_name", false, "YM_NAME");
        public final static Property Ym_date = new Property(4, String.class, "ym_date", false, "YM_DATE");
        public final static Property Ym_bw = new Property(5, String.class, "ym_bw", false, "YM_BW");
        public final static Property Ym_ph = new Property(6, String.class, "ym_ph", false, "YM_PH");
        public final static Property Ym_ys = new Property(7, String.class, "ym_ys", false, "YM_YS");
        public final static Property Ym_bz = new Property(8, String.class, "ym_bz", false, "YM_BZ");
        public final static Property CreateDate = new Property(9, String.class, "createDate", false, "CREATE_DATE");
    }


    public YimiaoDao(DaoConfig config) {
        super(config);
    }
    
    public YimiaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"YIMIAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ym_id
                "\"YFJZ_ID\" TEXT NOT NULL ," + // 1: yfjz_id
                "\"YM_TYPE\" INTEGER NOT NULL ," + // 2: ym_type
                "\"YM_NAME\" TEXT," + // 3: ym_name
                "\"YM_DATE\" TEXT NOT NULL ," + // 4: ym_date
                "\"YM_BW\" TEXT," + // 5: ym_bw
                "\"YM_PH\" TEXT," + // 6: ym_ph
                "\"YM_YS\" TEXT," + // 7: ym_ys
                "\"YM_BZ\" TEXT," + // 8: ym_bz
                "\"CREATE_DATE\" TEXT);"); // 9: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"YIMIAO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Yimiao entity) {
        stmt.clearBindings();
 
        Long ym_id = entity.getYm_id();
        if (ym_id != null) {
            stmt.bindLong(1, ym_id);
        }
        stmt.bindString(2, entity.getYfjz_id());
        stmt.bindLong(3, entity.getYm_type());
 
        String ym_name = entity.getYm_name();
        if (ym_name != null) {
            stmt.bindString(4, ym_name);
        }
        stmt.bindString(5, entity.getYm_date());
 
        String ym_bw = entity.getYm_bw();
        if (ym_bw != null) {
            stmt.bindString(6, ym_bw);
        }
 
        String ym_ph = entity.getYm_ph();
        if (ym_ph != null) {
            stmt.bindString(7, ym_ph);
        }
 
        String ym_ys = entity.getYm_ys();
        if (ym_ys != null) {
            stmt.bindString(8, ym_ys);
        }
 
        String ym_bz = entity.getYm_bz();
        if (ym_bz != null) {
            stmt.bindString(9, ym_bz);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(10, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Yimiao entity) {
        stmt.clearBindings();
 
        Long ym_id = entity.getYm_id();
        if (ym_id != null) {
            stmt.bindLong(1, ym_id);
        }
        stmt.bindString(2, entity.getYfjz_id());
        stmt.bindLong(3, entity.getYm_type());
 
        String ym_name = entity.getYm_name();
        if (ym_name != null) {
            stmt.bindString(4, ym_name);
        }
        stmt.bindString(5, entity.getYm_date());
 
        String ym_bw = entity.getYm_bw();
        if (ym_bw != null) {
            stmt.bindString(6, ym_bw);
        }
 
        String ym_ph = entity.getYm_ph();
        if (ym_ph != null) {
            stmt.bindString(7, ym_ph);
        }
 
        String ym_ys = entity.getYm_ys();
        if (ym_ys != null) {
            stmt.bindString(8, ym_ys);
        }
 
        String ym_bz = entity.getYm_bz();
        if (ym_bz != null) {
            stmt.bindString(9, ym_bz);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(10, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Yimiao readEntity(Cursor cursor, int offset) {
        Yimiao entity = new Yimiao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ym_id
            cursor.getString(offset + 1), // yfjz_id
            cursor.getInt(offset + 2), // ym_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ym_name
            cursor.getString(offset + 4), // ym_date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ym_bw
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ym_ph
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ym_ys
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ym_bz
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Yimiao entity, int offset) {
        entity.setYm_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYfjz_id(cursor.getString(offset + 1));
        entity.setYm_type(cursor.getInt(offset + 2));
        entity.setYm_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYm_date(cursor.getString(offset + 4));
        entity.setYm_bw(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setYm_ph(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setYm_ys(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setYm_bz(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Yimiao entity, long rowId) {
        entity.setYm_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Yimiao entity) {
        if(entity != null) {
            return entity.getYm_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Yimiao entity) {
        return entity.getYm_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
