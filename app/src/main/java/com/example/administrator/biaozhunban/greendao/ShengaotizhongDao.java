package com.example.administrator.biaozhunban.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.biaozhunban.greendao.entity.Shengaotizhong;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHENGAOTIZHONG".
*/
public class ShengaotizhongDao extends AbstractDao<Shengaotizhong, Long> {

    public static final String TABLENAME = "SHENGAOTIZHONG";

    /**
     * Properties of entity Shengaotizhong.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Hw_id = new Property(0, Long.class, "hw_id", true, "_id");
        public final static Property Na_id = new Property(1, String.class, "na_id", false, "NA_ID");
        public final static Property Yq_id = new Property(2, int.class, "yq_id", false, "YQ_ID");
        public final static Property Height = new Property(3, String.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(4, String.class, "weight", false, "WEIGHT");
        public final static Property BMI = new Property(5, String.class, "BMI", false, "BMI");
        public final static Property Hw_time = new Property(6, String.class, "hw_time", false, "HW_TIME");
        public final static Property CreateDate = new Property(7, String.class, "createDate", false, "CREATE_DATE");
    }


    public ShengaotizhongDao(DaoConfig config) {
        super(config);
    }
    
    public ShengaotizhongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHENGAOTIZHONG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: hw_id
                "\"NA_ID\" TEXT NOT NULL ," + // 1: na_id
                "\"YQ_ID\" INTEGER NOT NULL ," + // 2: yq_id
                "\"HEIGHT\" TEXT," + // 3: height
                "\"WEIGHT\" TEXT," + // 4: weight
                "\"BMI\" TEXT," + // 5: BMI
                "\"HW_TIME\" TEXT," + // 6: hw_time
                "\"CREATE_DATE\" TEXT);"); // 7: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHENGAOTIZHONG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Shengaotizhong entity) {
        stmt.clearBindings();
 
        Long hw_id = entity.getHw_id();
        if (hw_id != null) {
            stmt.bindLong(1, hw_id);
        }
        stmt.bindString(2, entity.getNa_id());
        stmt.bindLong(3, entity.getYq_id());
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(4, height);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(5, weight);
        }
 
        String BMI = entity.getBMI();
        if (BMI != null) {
            stmt.bindString(6, BMI);
        }
 
        String hw_time = entity.getHw_time();
        if (hw_time != null) {
            stmt.bindString(7, hw_time);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(8, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Shengaotizhong entity) {
        stmt.clearBindings();
 
        Long hw_id = entity.getHw_id();
        if (hw_id != null) {
            stmt.bindLong(1, hw_id);
        }
        stmt.bindString(2, entity.getNa_id());
        stmt.bindLong(3, entity.getYq_id());
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(4, height);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(5, weight);
        }
 
        String BMI = entity.getBMI();
        if (BMI != null) {
            stmt.bindString(6, BMI);
        }
 
        String hw_time = entity.getHw_time();
        if (hw_time != null) {
            stmt.bindString(7, hw_time);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(8, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Shengaotizhong readEntity(Cursor cursor, int offset) {
        Shengaotizhong entity = new Shengaotizhong( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // hw_id
            cursor.getString(offset + 1), // na_id
            cursor.getInt(offset + 2), // yq_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // height
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // weight
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // BMI
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hw_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Shengaotizhong entity, int offset) {
        entity.setHw_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNa_id(cursor.getString(offset + 1));
        entity.setYq_id(cursor.getInt(offset + 2));
        entity.setHeight(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeight(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBMI(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHw_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Shengaotizhong entity, long rowId) {
        entity.setHw_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Shengaotizhong entity) {
        if(entity != null) {
            return entity.getHw_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Shengaotizhong entity) {
        return entity.getHw_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
