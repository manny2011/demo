package com.example.administrator.biaozhunban.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.biaozhunban.greendao.entity.Natives;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NATIVES".
*/
public class NativesDao extends AbstractDao<Natives, Long> {

    public static final String TABLENAME = "NATIVES";

    /**
     * Properties of entity Natives.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Na_id = new Property(1, String.class, "na_id", false, "NA_ID");
        public final static Property Na_number = new Property(2, String.class, "na_number", false, "NA_NUMBER");
        public final static Property Na_name = new Property(3, String.class, "na_name", false, "NA_NAME");
        public final static Property Na_sex = new Property(4, int.class, "na_sex", false, "NA_SEX");
        public final static Property Na_age = new Property(5, int.class, "na_age", false, "NA_AGE");
        public final static Property Na_idcard = new Property(6, String.class, "na_idcard", false, "NA_IDCARD");
        public final static Property Na_address = new Property(7, String.class, "na_address", false, "NA_ADDRESS");
        public final static Property Na_household = new Property(8, String.class, "na_household", false, "NA_HOUSEHOLD");
        public final static Property Na_tel = new Property(9, String.class, "na_tel", false, "NA_TEL");
        public final static Property Na_birthday = new Property(10, String.class, "na_birthday", false, "NA_BIRTHDAY");
        public final static Property Na_country = new Property(11, String.class, "na_country", false, "NA_COUNTRY");
        public final static Property Na_villages = new Property(12, String.class, "na_villages", false, "NA_VILLAGES");
        public final static Property User_id = new Property(13, String.class, "user_id", false, "USER_ID");
        public final static Property Na_creattime = new Property(14, String.class, "na_creattime", false, "NA_CREATTIME");
        public final static Property Na_note = new Property(15, String.class, "na_note", false, "NA_NOTE");
        public final static Property CreateDate = new Property(16, String.class, "createDate", false, "CREATE_DATE");
    }


    public NativesDao(DaoConfig config) {
        super(config);
    }
    
    public NativesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NATIVES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NA_ID\" TEXT," + // 1: na_id
                "\"NA_NUMBER\" TEXT NOT NULL ," + // 2: na_number
                "\"NA_NAME\" TEXT NOT NULL ," + // 3: na_name
                "\"NA_SEX\" INTEGER NOT NULL ," + // 4: na_sex
                "\"NA_AGE\" INTEGER NOT NULL ," + // 5: na_age
                "\"NA_IDCARD\" TEXT NOT NULL UNIQUE ," + // 6: na_idcard
                "\"NA_ADDRESS\" TEXT," + // 7: na_address
                "\"NA_HOUSEHOLD\" TEXT," + // 8: na_household
                "\"NA_TEL\" TEXT," + // 9: na_tel
                "\"NA_BIRTHDAY\" TEXT," + // 10: na_birthday
                "\"NA_COUNTRY\" TEXT," + // 11: na_country
                "\"NA_VILLAGES\" TEXT," + // 12: na_villages
                "\"USER_ID\" TEXT," + // 13: user_id
                "\"NA_CREATTIME\" TEXT," + // 14: na_creattime
                "\"NA_NOTE\" TEXT," + // 15: na_note
                "\"CREATE_DATE\" TEXT);"); // 16: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NATIVES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Natives entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String na_id = entity.getNa_id();
        if (na_id != null) {
            stmt.bindString(2, na_id);
        }
        stmt.bindString(3, entity.getNa_number());
        stmt.bindString(4, entity.getNa_name());
        stmt.bindLong(5, entity.getNa_sex());
        stmt.bindLong(6, entity.getNa_age());
        stmt.bindString(7, entity.getNa_idcard());
 
        String na_address = entity.getNa_address();
        if (na_address != null) {
            stmt.bindString(8, na_address);
        }
 
        String na_household = entity.getNa_household();
        if (na_household != null) {
            stmt.bindString(9, na_household);
        }
 
        String na_tel = entity.getNa_tel();
        if (na_tel != null) {
            stmt.bindString(10, na_tel);
        }
 
        String na_birthday = entity.getNa_birthday();
        if (na_birthday != null) {
            stmt.bindString(11, na_birthday);
        }
 
        String na_country = entity.getNa_country();
        if (na_country != null) {
            stmt.bindString(12, na_country);
        }
 
        String na_villages = entity.getNa_villages();
        if (na_villages != null) {
            stmt.bindString(13, na_villages);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(14, user_id);
        }
 
        String na_creattime = entity.getNa_creattime();
        if (na_creattime != null) {
            stmt.bindString(15, na_creattime);
        }
 
        String na_note = entity.getNa_note();
        if (na_note != null) {
            stmt.bindString(16, na_note);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(17, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Natives entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String na_id = entity.getNa_id();
        if (na_id != null) {
            stmt.bindString(2, na_id);
        }
        stmt.bindString(3, entity.getNa_number());
        stmt.bindString(4, entity.getNa_name());
        stmt.bindLong(5, entity.getNa_sex());
        stmt.bindLong(6, entity.getNa_age());
        stmt.bindString(7, entity.getNa_idcard());
 
        String na_address = entity.getNa_address();
        if (na_address != null) {
            stmt.bindString(8, na_address);
        }
 
        String na_household = entity.getNa_household();
        if (na_household != null) {
            stmt.bindString(9, na_household);
        }
 
        String na_tel = entity.getNa_tel();
        if (na_tel != null) {
            stmt.bindString(10, na_tel);
        }
 
        String na_birthday = entity.getNa_birthday();
        if (na_birthday != null) {
            stmt.bindString(11, na_birthday);
        }
 
        String na_country = entity.getNa_country();
        if (na_country != null) {
            stmt.bindString(12, na_country);
        }
 
        String na_villages = entity.getNa_villages();
        if (na_villages != null) {
            stmt.bindString(13, na_villages);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(14, user_id);
        }
 
        String na_creattime = entity.getNa_creattime();
        if (na_creattime != null) {
            stmt.bindString(15, na_creattime);
        }
 
        String na_note = entity.getNa_note();
        if (na_note != null) {
            stmt.bindString(16, na_note);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(17, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Natives readEntity(Cursor cursor, int offset) {
        Natives entity = new Natives( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // na_id
            cursor.getString(offset + 2), // na_number
            cursor.getString(offset + 3), // na_name
            cursor.getInt(offset + 4), // na_sex
            cursor.getInt(offset + 5), // na_age
            cursor.getString(offset + 6), // na_idcard
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // na_address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // na_household
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // na_tel
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // na_birthday
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // na_country
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // na_villages
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // user_id
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // na_creattime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // na_note
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Natives entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNa_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNa_number(cursor.getString(offset + 2));
        entity.setNa_name(cursor.getString(offset + 3));
        entity.setNa_sex(cursor.getInt(offset + 4));
        entity.setNa_age(cursor.getInt(offset + 5));
        entity.setNa_idcard(cursor.getString(offset + 6));
        entity.setNa_address(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNa_household(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNa_tel(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNa_birthday(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNa_country(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNa_villages(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUser_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNa_creattime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setNa_note(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCreateDate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Natives entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Natives entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Natives entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
