package com.example.administrator.biaozhunban.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.biaozhunban.greendao.entity.Zhuyuanzhiliaoqingkuang;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZHUYUANZHILIAOQINGKUANG".
*/
public class ZhuyuanzhiliaoqingkuangDao extends AbstractDao<Zhuyuanzhiliaoqingkuang, Long> {

    public static final String TABLENAME = "ZHUYUANZHILIAOQINGKUANG";

    /**
     * Properties of entity Zhuyuanzhiliaoqingkuang.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Zyzl_id = new Property(1, String.class, "zyzl_id", false, "ZYZL_ID");
        public final static Property Jktj_id = new Property(2, String.class, "jktj_id", false, "JKTJ_ID");
        public final static Property Zyzl_type = new Property(3, int.class, "zyzl_type", false, "ZYZL_TYPE");
        public final static Property Zyzl_ru = new Property(4, String.class, "zyzl_ru", false, "ZYZL_RU");
        public final static Property Zyzl_chu = new Property(5, String.class, "zyzl_chu", false, "ZYZL_CHU");
        public final static Property Zyzl_yy = new Property(6, String.class, "zyzl_yy", false, "ZYZL_YY");
        public final static Property Zyzl_jg = new Property(7, String.class, "zyzl_jg", false, "ZYZL_JG");
        public final static Property Zyzl_ba = new Property(8, String.class, "zyzl_ba", false, "ZYZL_BA");
        public final static Property CreateDate = new Property(9, String.class, "createDate", false, "CREATE_DATE");
    }


    public ZhuyuanzhiliaoqingkuangDao(DaoConfig config) {
        super(config);
    }
    
    public ZhuyuanzhiliaoqingkuangDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZHUYUANZHILIAOQINGKUANG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ZYZL_ID\" TEXT NOT NULL ," + // 1: zyzl_id
                "\"JKTJ_ID\" TEXT NOT NULL ," + // 2: jktj_id
                "\"ZYZL_TYPE\" INTEGER NOT NULL ," + // 3: zyzl_type
                "\"ZYZL_RU\" TEXT," + // 4: zyzl_ru
                "\"ZYZL_CHU\" TEXT," + // 5: zyzl_chu
                "\"ZYZL_YY\" TEXT," + // 6: zyzl_yy
                "\"ZYZL_JG\" TEXT," + // 7: zyzl_jg
                "\"ZYZL_BA\" TEXT," + // 8: zyzl_ba
                "\"CREATE_DATE\" TEXT);"); // 9: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZHUYUANZHILIAOQINGKUANG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Zhuyuanzhiliaoqingkuang entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getZyzl_id());
        stmt.bindString(3, entity.getJktj_id());
        stmt.bindLong(4, entity.getZyzl_type());
 
        String zyzl_ru = entity.getZyzl_ru();
        if (zyzl_ru != null) {
            stmt.bindString(5, zyzl_ru);
        }
 
        String zyzl_chu = entity.getZyzl_chu();
        if (zyzl_chu != null) {
            stmt.bindString(6, zyzl_chu);
        }
 
        String zyzl_yy = entity.getZyzl_yy();
        if (zyzl_yy != null) {
            stmt.bindString(7, zyzl_yy);
        }
 
        String zyzl_jg = entity.getZyzl_jg();
        if (zyzl_jg != null) {
            stmt.bindString(8, zyzl_jg);
        }
 
        String zyzl_ba = entity.getZyzl_ba();
        if (zyzl_ba != null) {
            stmt.bindString(9, zyzl_ba);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(10, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Zhuyuanzhiliaoqingkuang entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getZyzl_id());
        stmt.bindString(3, entity.getJktj_id());
        stmt.bindLong(4, entity.getZyzl_type());
 
        String zyzl_ru = entity.getZyzl_ru();
        if (zyzl_ru != null) {
            stmt.bindString(5, zyzl_ru);
        }
 
        String zyzl_chu = entity.getZyzl_chu();
        if (zyzl_chu != null) {
            stmt.bindString(6, zyzl_chu);
        }
 
        String zyzl_yy = entity.getZyzl_yy();
        if (zyzl_yy != null) {
            stmt.bindString(7, zyzl_yy);
        }
 
        String zyzl_jg = entity.getZyzl_jg();
        if (zyzl_jg != null) {
            stmt.bindString(8, zyzl_jg);
        }
 
        String zyzl_ba = entity.getZyzl_ba();
        if (zyzl_ba != null) {
            stmt.bindString(9, zyzl_ba);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(10, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Zhuyuanzhiliaoqingkuang readEntity(Cursor cursor, int offset) {
        Zhuyuanzhiliaoqingkuang entity = new Zhuyuanzhiliaoqingkuang( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // zyzl_id
            cursor.getString(offset + 2), // jktj_id
            cursor.getInt(offset + 3), // zyzl_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zyzl_ru
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zyzl_chu
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zyzl_yy
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // zyzl_jg
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zyzl_ba
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Zhuyuanzhiliaoqingkuang entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setZyzl_id(cursor.getString(offset + 1));
        entity.setJktj_id(cursor.getString(offset + 2));
        entity.setZyzl_type(cursor.getInt(offset + 3));
        entity.setZyzl_ru(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZyzl_chu(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZyzl_yy(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZyzl_jg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZyzl_ba(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Zhuyuanzhiliaoqingkuang entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Zhuyuanzhiliaoqingkuang entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Zhuyuanzhiliaoqingkuang entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
