package com.example.administrator.biaozhunban.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.biaozhunban.greendao.entity.SheBei;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHE_BEI".
*/
public class SheBeiDao extends AbstractDao<SheBei, Long> {

    public static final String TABLENAME = "SHE_BEI";

    /**
     * Properties of entity SheBei.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Equip_id = new Property(1, String.class, "equip_id", false, "EQUIP_ID");
        public final static Property Equip_name = new Property(2, String.class, "equip_name", false, "EQUIP_NAME");
        public final static Property Equip_model = new Property(3, String.class, "equip_model", false, "EQUIP_MODEL");
        public final static Property Equip_type = new Property(4, String.class, "equip_type", false, "EQUIP_TYPE");
        public final static Property Equip_number = new Property(5, String.class, "equip_number", false, "EQUIP_NUMBER");
        public final static Property Equip_qc = new Property(6, int.class, "equip_qc", false, "EQUIP_QC");
        public final static Property Equip_time = new Property(7, String.class, "equip_time", false, "EQUIP_TIME");
        public final static Property Equip_installer = new Property(8, String.class, "equip_installer", false, "EQUIP_INSTALLER");
        public final static Property Equip_remark = new Property(9, String.class, "equip_remark", false, "EQUIP_REMARK");
        public final static Property CreateDate = new Property(10, String.class, "createDate", false, "CREATE_DATE");
    }


    public SheBeiDao(DaoConfig config) {
        super(config);
    }
    
    public SheBeiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHE_BEI\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EQUIP_ID\" TEXT NOT NULL ," + // 1: equip_id
                "\"EQUIP_NAME\" TEXT," + // 2: equip_name
                "\"EQUIP_MODEL\" TEXT," + // 3: equip_model
                "\"EQUIP_TYPE\" TEXT," + // 4: equip_type
                "\"EQUIP_NUMBER\" TEXT," + // 5: equip_number
                "\"EQUIP_QC\" INTEGER NOT NULL ," + // 6: equip_qc
                "\"EQUIP_TIME\" TEXT," + // 7: equip_time
                "\"EQUIP_INSTALLER\" TEXT," + // 8: equip_installer
                "\"EQUIP_REMARK\" TEXT," + // 9: equip_remark
                "\"CREATE_DATE\" TEXT);"); // 10: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHE_BEI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SheBei entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getEquip_id());
 
        String equip_name = entity.getEquip_name();
        if (equip_name != null) {
            stmt.bindString(3, equip_name);
        }
 
        String equip_model = entity.getEquip_model();
        if (equip_model != null) {
            stmt.bindString(4, equip_model);
        }
 
        String equip_type = entity.getEquip_type();
        if (equip_type != null) {
            stmt.bindString(5, equip_type);
        }
 
        String equip_number = entity.getEquip_number();
        if (equip_number != null) {
            stmt.bindString(6, equip_number);
        }
        stmt.bindLong(7, entity.getEquip_qc());
 
        String equip_time = entity.getEquip_time();
        if (equip_time != null) {
            stmt.bindString(8, equip_time);
        }
 
        String equip_installer = entity.getEquip_installer();
        if (equip_installer != null) {
            stmt.bindString(9, equip_installer);
        }
 
        String equip_remark = entity.getEquip_remark();
        if (equip_remark != null) {
            stmt.bindString(10, equip_remark);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(11, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SheBei entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getEquip_id());
 
        String equip_name = entity.getEquip_name();
        if (equip_name != null) {
            stmt.bindString(3, equip_name);
        }
 
        String equip_model = entity.getEquip_model();
        if (equip_model != null) {
            stmt.bindString(4, equip_model);
        }
 
        String equip_type = entity.getEquip_type();
        if (equip_type != null) {
            stmt.bindString(5, equip_type);
        }
 
        String equip_number = entity.getEquip_number();
        if (equip_number != null) {
            stmt.bindString(6, equip_number);
        }
        stmt.bindLong(7, entity.getEquip_qc());
 
        String equip_time = entity.getEquip_time();
        if (equip_time != null) {
            stmt.bindString(8, equip_time);
        }
 
        String equip_installer = entity.getEquip_installer();
        if (equip_installer != null) {
            stmt.bindString(9, equip_installer);
        }
 
        String equip_remark = entity.getEquip_remark();
        if (equip_remark != null) {
            stmt.bindString(10, equip_remark);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(11, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SheBei readEntity(Cursor cursor, int offset) {
        SheBei entity = new SheBei( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // equip_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // equip_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // equip_model
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // equip_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // equip_number
            cursor.getInt(offset + 6), // equip_qc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // equip_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // equip_installer
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // equip_remark
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SheBei entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEquip_id(cursor.getString(offset + 1));
        entity.setEquip_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEquip_model(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEquip_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEquip_number(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEquip_qc(cursor.getInt(offset + 6));
        entity.setEquip_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEquip_installer(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEquip_remark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SheBei entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SheBei entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SheBei entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
