package com.example.administrator.biaozhunban.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.biaozhunban.greendao.entity.JuMinJiChuDangAn;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JU_MIN_JI_CHU_DANG_AN".
*/
public class JuMinJiChuDangAnDao extends AbstractDao<JuMinJiChuDangAn, Long> {

    public static final String TABLENAME = "JU_MIN_JI_CHU_DANG_AN";

    /**
     * Properties of entity JuMinJiChuDangAn.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Bs_id = new Property(1, String.class, "bs_id", false, "BS_ID");
        public final static Property Na_id = new Property(2, String.class, "na_id", false, "NA_ID");
        public final static Property Bs_othername = new Property(3, String.class, "bs_othername", false, "BS_OTHERNAME");
        public final static Property Bs_othertel = new Property(4, String.class, "bs_othertel", false, "BS_OTHERTEL");
        public final static Property Bs_live_type = new Property(5, int.class, "bs_live_type", false, "BS_LIVE_TYPE");
        public final static Property Nation_id = new Property(6, int.class, "nation_id", false, "NATION_ID");
        public final static Property Bs_blood_type = new Property(7, int.class, "bs_blood_type", false, "BS_BLOOD_TYPE");
        public final static Property Bs_rh = new Property(8, int.class, "bs_rh", false, "BS_RH");
        public final static Property Bs_education = new Property(9, int.class, "bs_education", false, "BS_EDUCATION");
        public final static Property Bs_marriage = new Property(10, int.class, "bs_marriage", false, "BS_MARRIAGE");
        public final static Property Bs_pay = new Property(11, int.class, "bs_pay", false, "BS_PAY");
        public final static Property Bs_allergy = new Property(12, int.class, "bs_allergy", false, "BS_ALLERGY");
        public final static Property Bs_expose = new Property(13, int.class, "bs_expose", false, "BS_EXPOSE");
        public final static Property Bs_disability = new Property(14, int.class, "bs_disability", false, "BS_DISABILITY");
        public final static Property Bs_genetic = new Property(15, int.class, "bs_genetic", false, "BS_GENETIC");
        public final static Property Bs_disease_name = new Property(16, String.class, "bs_disease_name", false, "BS_DISEASE_NAME");
        public final static Property Bs_date = new Property(17, String.class, "bs_date", false, "BS_DATE");
        public final static Property Bs_work = new Property(18, String.class, "bs_work", false, "BS_WORK");
        public final static Property Bs_zhiy = new Property(19, int.class, "bs_zhiy", false, "BS_ZHIY");
        public final static Property CreateDate = new Property(20, String.class, "createDate", false, "CREATE_DATE");
    }


    public JuMinJiChuDangAnDao(DaoConfig config) {
        super(config);
    }
    
    public JuMinJiChuDangAnDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JU_MIN_JI_CHU_DANG_AN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BS_ID\" TEXT NOT NULL ," + // 1: bs_id
                "\"NA_ID\" TEXT," + // 2: na_id
                "\"BS_OTHERNAME\" TEXT," + // 3: bs_othername
                "\"BS_OTHERTEL\" TEXT," + // 4: bs_othertel
                "\"BS_LIVE_TYPE\" INTEGER NOT NULL ," + // 5: bs_live_type
                "\"NATION_ID\" INTEGER NOT NULL ," + // 6: nation_id
                "\"BS_BLOOD_TYPE\" INTEGER NOT NULL ," + // 7: bs_blood_type
                "\"BS_RH\" INTEGER NOT NULL ," + // 8: bs_rh
                "\"BS_EDUCATION\" INTEGER NOT NULL ," + // 9: bs_education
                "\"BS_MARRIAGE\" INTEGER NOT NULL ," + // 10: bs_marriage
                "\"BS_PAY\" INTEGER NOT NULL ," + // 11: bs_pay
                "\"BS_ALLERGY\" INTEGER NOT NULL ," + // 12: bs_allergy
                "\"BS_EXPOSE\" INTEGER NOT NULL ," + // 13: bs_expose
                "\"BS_DISABILITY\" INTEGER NOT NULL ," + // 14: bs_disability
                "\"BS_GENETIC\" INTEGER NOT NULL ," + // 15: bs_genetic
                "\"BS_DISEASE_NAME\" TEXT," + // 16: bs_disease_name
                "\"BS_DATE\" TEXT," + // 17: bs_date
                "\"BS_WORK\" TEXT," + // 18: bs_work
                "\"BS_ZHIY\" INTEGER NOT NULL ," + // 19: bs_zhiy
                "\"CREATE_DATE\" TEXT);"); // 20: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JU_MIN_JI_CHU_DANG_AN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JuMinJiChuDangAn entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBs_id());
 
        String na_id = entity.getNa_id();
        if (na_id != null) {
            stmt.bindString(3, na_id);
        }
 
        String bs_othername = entity.getBs_othername();
        if (bs_othername != null) {
            stmt.bindString(4, bs_othername);
        }
 
        String bs_othertel = entity.getBs_othertel();
        if (bs_othertel != null) {
            stmt.bindString(5, bs_othertel);
        }
        stmt.bindLong(6, entity.getBs_live_type());
        stmt.bindLong(7, entity.getNation_id());
        stmt.bindLong(8, entity.getBs_blood_type());
        stmt.bindLong(9, entity.getBs_rh());
        stmt.bindLong(10, entity.getBs_education());
        stmt.bindLong(11, entity.getBs_marriage());
        stmt.bindLong(12, entity.getBs_pay());
        stmt.bindLong(13, entity.getBs_allergy());
        stmt.bindLong(14, entity.getBs_expose());
        stmt.bindLong(15, entity.getBs_disability());
        stmt.bindLong(16, entity.getBs_genetic());
 
        String bs_disease_name = entity.getBs_disease_name();
        if (bs_disease_name != null) {
            stmt.bindString(17, bs_disease_name);
        }
 
        String bs_date = entity.getBs_date();
        if (bs_date != null) {
            stmt.bindString(18, bs_date);
        }
 
        String bs_work = entity.getBs_work();
        if (bs_work != null) {
            stmt.bindString(19, bs_work);
        }
        stmt.bindLong(20, entity.getBs_zhiy());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(21, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JuMinJiChuDangAn entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBs_id());
 
        String na_id = entity.getNa_id();
        if (na_id != null) {
            stmt.bindString(3, na_id);
        }
 
        String bs_othername = entity.getBs_othername();
        if (bs_othername != null) {
            stmt.bindString(4, bs_othername);
        }
 
        String bs_othertel = entity.getBs_othertel();
        if (bs_othertel != null) {
            stmt.bindString(5, bs_othertel);
        }
        stmt.bindLong(6, entity.getBs_live_type());
        stmt.bindLong(7, entity.getNation_id());
        stmt.bindLong(8, entity.getBs_blood_type());
        stmt.bindLong(9, entity.getBs_rh());
        stmt.bindLong(10, entity.getBs_education());
        stmt.bindLong(11, entity.getBs_marriage());
        stmt.bindLong(12, entity.getBs_pay());
        stmt.bindLong(13, entity.getBs_allergy());
        stmt.bindLong(14, entity.getBs_expose());
        stmt.bindLong(15, entity.getBs_disability());
        stmt.bindLong(16, entity.getBs_genetic());
 
        String bs_disease_name = entity.getBs_disease_name();
        if (bs_disease_name != null) {
            stmt.bindString(17, bs_disease_name);
        }
 
        String bs_date = entity.getBs_date();
        if (bs_date != null) {
            stmt.bindString(18, bs_date);
        }
 
        String bs_work = entity.getBs_work();
        if (bs_work != null) {
            stmt.bindString(19, bs_work);
        }
        stmt.bindLong(20, entity.getBs_zhiy());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(21, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public JuMinJiChuDangAn readEntity(Cursor cursor, int offset) {
        JuMinJiChuDangAn entity = new JuMinJiChuDangAn( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // bs_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // na_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bs_othername
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bs_othertel
            cursor.getInt(offset + 5), // bs_live_type
            cursor.getInt(offset + 6), // nation_id
            cursor.getInt(offset + 7), // bs_blood_type
            cursor.getInt(offset + 8), // bs_rh
            cursor.getInt(offset + 9), // bs_education
            cursor.getInt(offset + 10), // bs_marriage
            cursor.getInt(offset + 11), // bs_pay
            cursor.getInt(offset + 12), // bs_allergy
            cursor.getInt(offset + 13), // bs_expose
            cursor.getInt(offset + 14), // bs_disability
            cursor.getInt(offset + 15), // bs_genetic
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // bs_disease_name
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // bs_date
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // bs_work
            cursor.getInt(offset + 19), // bs_zhiy
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JuMinJiChuDangAn entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBs_id(cursor.getString(offset + 1));
        entity.setNa_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBs_othername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBs_othertel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBs_live_type(cursor.getInt(offset + 5));
        entity.setNation_id(cursor.getInt(offset + 6));
        entity.setBs_blood_type(cursor.getInt(offset + 7));
        entity.setBs_rh(cursor.getInt(offset + 8));
        entity.setBs_education(cursor.getInt(offset + 9));
        entity.setBs_marriage(cursor.getInt(offset + 10));
        entity.setBs_pay(cursor.getInt(offset + 11));
        entity.setBs_allergy(cursor.getInt(offset + 12));
        entity.setBs_expose(cursor.getInt(offset + 13));
        entity.setBs_disability(cursor.getInt(offset + 14));
        entity.setBs_genetic(cursor.getInt(offset + 15));
        entity.setBs_disease_name(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBs_date(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBs_work(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBs_zhiy(cursor.getInt(offset + 19));
        entity.setCreateDate(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(JuMinJiChuDangAn entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(JuMinJiChuDangAn entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JuMinJiChuDangAn entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
