package com.example.administrator.biaozhunban.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.biaozhunban.greendao.entity.County;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUNTY".
*/
public class CountyDao extends AbstractDao<County, Long> {

    public static final String TABLENAME = "COUNTY";

    /**
     * Properties of entity County.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Area_id = new Property(0, Long.class, "area_id", true, "_id");
        public final static Property Area_code = new Property(1, String.class, "area_code", false, "AREA_CODE");
        public final static Property Area_name = new Property(2, String.class, "area_name", false, "AREA_NAME");
        public final static Property City_code = new Property(3, String.class, "city_code", false, "CITY_CODE");
        public final static Property CreateDate = new Property(4, String.class, "createDate", false, "CREATE_DATE");
    }


    public CountyDao(DaoConfig config) {
        super(config);
    }
    
    public CountyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNTY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: area_id
                "\"AREA_CODE\" TEXT," + // 1: area_code
                "\"AREA_NAME\" TEXT," + // 2: area_name
                "\"CITY_CODE\" TEXT," + // 3: city_code
                "\"CREATE_DATE\" TEXT);"); // 4: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNTY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, County entity) {
        stmt.clearBindings();
 
        Long area_id = entity.getArea_id();
        if (area_id != null) {
            stmt.bindLong(1, area_id);
        }
 
        String area_code = entity.getArea_code();
        if (area_code != null) {
            stmt.bindString(2, area_code);
        }
 
        String area_name = entity.getArea_name();
        if (area_name != null) {
            stmt.bindString(3, area_name);
        }
 
        String city_code = entity.getCity_code();
        if (city_code != null) {
            stmt.bindString(4, city_code);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(5, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, County entity) {
        stmt.clearBindings();
 
        Long area_id = entity.getArea_id();
        if (area_id != null) {
            stmt.bindLong(1, area_id);
        }
 
        String area_code = entity.getArea_code();
        if (area_code != null) {
            stmt.bindString(2, area_code);
        }
 
        String area_name = entity.getArea_name();
        if (area_name != null) {
            stmt.bindString(3, area_name);
        }
 
        String city_code = entity.getCity_code();
        if (city_code != null) {
            stmt.bindString(4, city_code);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(5, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public County readEntity(Cursor cursor, int offset) {
        County entity = new County( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // area_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // area_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // area_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, County entity, int offset) {
        entity.setArea_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArea_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArea_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(County entity, long rowId) {
        entity.setArea_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(County entity) {
        if(entity != null) {
            return entity.getArea_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(County entity) {
        return entity.getArea_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
