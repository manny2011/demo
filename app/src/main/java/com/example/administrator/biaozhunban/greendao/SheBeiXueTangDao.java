package com.example.administrator.biaozhunban.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.biaozhunban.greendao.entity.SheBeiXueTang;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHE_BEI_XUE_TANG".
*/
public class SheBeiXueTangDao extends AbstractDao<SheBeiXueTang, Long> {

    public static final String TABLENAME = "SHE_BEI_XUE_TANG";

    /**
     * Properties of entity SheBeiXueTang.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Glu_id = new Property(1, String.class, "glu_id", false, "GLU_ID");
        public final static Property Na_id = new Property(2, String.class, "na_id", false, "NA_ID");
        public final static Property Equip_id = new Property(3, String.class, "equip_id", false, "EQUIP_ID");
        public final static Property Fasting_glu = new Property(4, String.class, "Fasting_glu", false, "FASTING_GLU");
        public final static Property After_meal_glu = new Property(5, String.class, "After_meal_glu", false, "AFTER_MEAL_GLU");
        public final static Property Glu_thxhdb = new Property(6, String.class, "glu_thxhdb", false, "GLU_THXHDB");
        public final static Property Glu_time = new Property(7, String.class, "glu_time", false, "GLU_TIME");
        public final static Property CreateDate = new Property(8, String.class, "createDate", false, "CREATE_DATE");
    }


    public SheBeiXueTangDao(DaoConfig config) {
        super(config);
    }
    
    public SheBeiXueTangDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHE_BEI_XUE_TANG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GLU_ID\" TEXT NOT NULL ," + // 1: glu_id
                "\"NA_ID\" TEXT," + // 2: na_id
                "\"EQUIP_ID\" TEXT," + // 3: equip_id
                "\"FASTING_GLU\" TEXT," + // 4: Fasting_glu
                "\"AFTER_MEAL_GLU\" TEXT," + // 5: After_meal_glu
                "\"GLU_THXHDB\" TEXT," + // 6: glu_thxhdb
                "\"GLU_TIME\" TEXT," + // 7: glu_time
                "\"CREATE_DATE\" TEXT);"); // 8: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHE_BEI_XUE_TANG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SheBeiXueTang entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getGlu_id());
 
        String na_id = entity.getNa_id();
        if (na_id != null) {
            stmt.bindString(3, na_id);
        }
 
        String equip_id = entity.getEquip_id();
        if (equip_id != null) {
            stmt.bindString(4, equip_id);
        }
 
        String Fasting_glu = entity.getFasting_glu();
        if (Fasting_glu != null) {
            stmt.bindString(5, Fasting_glu);
        }
 
        String After_meal_glu = entity.getAfter_meal_glu();
        if (After_meal_glu != null) {
            stmt.bindString(6, After_meal_glu);
        }
 
        String glu_thxhdb = entity.getGlu_thxhdb();
        if (glu_thxhdb != null) {
            stmt.bindString(7, glu_thxhdb);
        }
 
        String glu_time = entity.getGlu_time();
        if (glu_time != null) {
            stmt.bindString(8, glu_time);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(9, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SheBeiXueTang entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getGlu_id());
 
        String na_id = entity.getNa_id();
        if (na_id != null) {
            stmt.bindString(3, na_id);
        }
 
        String equip_id = entity.getEquip_id();
        if (equip_id != null) {
            stmt.bindString(4, equip_id);
        }
 
        String Fasting_glu = entity.getFasting_glu();
        if (Fasting_glu != null) {
            stmt.bindString(5, Fasting_glu);
        }
 
        String After_meal_glu = entity.getAfter_meal_glu();
        if (After_meal_glu != null) {
            stmt.bindString(6, After_meal_glu);
        }
 
        String glu_thxhdb = entity.getGlu_thxhdb();
        if (glu_thxhdb != null) {
            stmt.bindString(7, glu_thxhdb);
        }
 
        String glu_time = entity.getGlu_time();
        if (glu_time != null) {
            stmt.bindString(8, glu_time);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(9, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SheBeiXueTang readEntity(Cursor cursor, int offset) {
        SheBeiXueTang entity = new SheBeiXueTang( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // glu_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // na_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // equip_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Fasting_glu
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // After_meal_glu
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // glu_thxhdb
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // glu_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SheBeiXueTang entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGlu_id(cursor.getString(offset + 1));
        entity.setNa_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEquip_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFasting_glu(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAfter_meal_glu(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGlu_thxhdb(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGlu_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SheBeiXueTang entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SheBeiXueTang entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SheBeiXueTang entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
