package com.example.administrator.biaozhunban.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.biaozhunban.greendao.entity.BTDevice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BTDEVICE".
*/
public class BTDeviceDao extends AbstractDao<BTDevice, Long> {

    public static final String TABLENAME = "BTDEVICE";

    /**
     * Properties of entity BTDevice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceName = new Property(1, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property Alias = new Property(2, String.class, "alias", false, "ALIAS");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property PairDate = new Property(4, String.class, "pairDate", false, "PAIR_DATE");
        public final static Property CreateDate = new Property(5, String.class, "createDate", false, "CREATE_DATE");
    }


    public BTDeviceDao(DaoConfig config) {
        super(config);
    }
    
    public BTDeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BTDEVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_NAME\" TEXT," + // 1: deviceName
                "\"ALIAS\" TEXT NOT NULL ," + // 2: alias
                "\"ADDRESS\" TEXT NOT NULL UNIQUE ," + // 3: address
                "\"PAIR_DATE\" TEXT," + // 4: pairDate
                "\"CREATE_DATE\" TEXT);"); // 5: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BTDEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BTDevice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(2, deviceName);
        }
        stmt.bindString(3, entity.getAlias());
        stmt.bindString(4, entity.getAddress());
 
        String pairDate = entity.getPairDate();
        if (pairDate != null) {
            stmt.bindString(5, pairDate);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BTDevice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(2, deviceName);
        }
        stmt.bindString(3, entity.getAlias());
        stmt.bindString(4, entity.getAddress());
 
        String pairDate = entity.getPairDate();
        if (pairDate != null) {
            stmt.bindString(5, pairDate);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BTDevice readEntity(Cursor cursor, int offset) {
        BTDevice entity = new BTDevice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceName
            cursor.getString(offset + 2), // alias
            cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pairDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BTDevice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlias(cursor.getString(offset + 2));
        entity.setAddress(cursor.getString(offset + 3));
        entity.setPairDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BTDevice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BTDevice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BTDevice entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
